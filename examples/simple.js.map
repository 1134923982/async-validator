{"version":3,"sources":["webpack:///./examples/simple.js"],"names":["schema","Schema","name","type","required","min","max","address","fields","province","city","message","async","asyncValidator","rule","value","callback","setTimeout","Promise","resolve","reject","Error","validate","errors","console","log"],"mappings":";;;;;;;;;;;;;;;;AAEA;;;;;;AAEA,IAAMA,SAAS,IAAIC,2BAAJ,CAAW;AACxBC,QAAM;AACJC,UAAM,QADF;AAEJC,cAAU,IAFN;AAGJC,SAAK,CAHD;AAIJC,SAAK;AAJD,GADkB;AAOxBC,WAAS;AACPJ,UAAM,QADC;AAEPC,cAAU,IAFH;AAGPI,YAAQ;AACNC,gBAAU;AACRN,cAAM,QADE;AAERC,kBAAU,IAFF;AAGRC,aAAK;AAHG,OADJ;AAMNK,YAAM;AACJP,cAAM,QADF;AAEJQ,iBAAS,gBAFL;AAGJN,aAAK;AAHD,OANA;AAWNO,aAAO;AACLC,sBADK,0BACUC,IADV,EACgBC,KADhB,EACuBC,QADvB,EACiC;AACpCC,qBAAW,YAAM;AACfD,qBAASF,KAAKH,OAAd;AACD,WAFD,EAEG,GAFH;AAGD,SALI;;AAMLA,iBAAS;AANJ;AAXD;AAHD,GAPe;AA+BxBC,SAAO;AACLC,kBADK,0BACUC,IADV,EACgBC,KADhB,EACuB;AAC1B,aAAO,IAAIG,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCH,mBAAW,YAAM;AACfG,iBAAO,CAAC,IAAIC,KAAJ,CAAUP,KAAKH,OAAf,CAAD,CAAP;AACD,SAFD,EAEG,GAFH;AAGD,OAJM,CAAP;AAKD,KAPI;;AAQLA,aAAS;AARJ;AA/BiB,CAAX,CAAf,C,CAJA;;AA+CAX,OAAOsB,QAAP,CAAgB;AACdpB,QAAM,CADQ;AAEdK,WAAS;AACPG,UAAM;AADC,GAFK;AAKdE,SAAO;AALO,CAAhB,EAMG,UAACW,MAAD,EAASf,MAAT,EAAoB;AACrBgB,UAAQC,GAAR,CAAY,QAAZ;AACAD,UAAQC,GAAR,CAAYF,MAAZ;AACAC,UAAQC,GAAR,CAAY,QAAZ;AACAD,UAAQC,GAAR,CAAYjB,MAAZ;AACD,CAXD,WAYS,gBAAwB;AAAA,MAArBe,MAAqB,QAArBA,MAAqB;AAAA,MAAbf,MAAa,QAAbA,MAAa;;AAC7BgB,UAAQC,GAAR,CAAYF,MAAZ,EAAoBf,MAApB;AACD,CAdH;;AAgBAgB,QAAQC,GAAR,CAAY,KAAZ,E","file":"examples/simple.js","sourcesContent":["/* eslint no-console:0 no-unused-vars:0 */\n\nimport Schema from 'async-validator';\n\nconst schema = new Schema({\n  name: {\n    type: 'string',\n    required: true,\n    min: 5,\n    max: 10,\n  },\n  address: {\n    type: 'object',\n    required: true,\n    fields: {\n      province: {\n        type: 'string',\n        required: true,\n        min: 4,\n      },\n      city: {\n        type: 'string',\n        message: 'custom message',\n        min: 5,\n      },\n      async: {\n        asyncValidator(rule, value, callback) {\n          setTimeout(() => {\n            callback(rule.message);\n          }, 100);\n        },\n        message: 'address async fails',\n      },\n    },\n  },\n  async: {\n    asyncValidator(rule, value) {\n      return new Promise((resolve, reject) => {\n        setTimeout(() => {\n          reject([new Error(rule.message)]);\n        }, 100);\n      });\n    },\n    message: 'async fails',\n  },\n});\n\nschema.validate({\n  name: 2,\n  address: {\n    city: 2,\n  },\n  async: '2',\n}, (errors, fields) => {\n  console.log('errors');\n  console.log(errors);\n  console.log('fields');\n  console.log(fields);\n})\n  .catch(({ errors, fields }) => {\n    console.log(errors, fields);\n  });\n\nconsole.log('end');\n\n\n\n// WEBPACK FOOTER //\n// ./examples/simple.js"],"sourceRoot":""}